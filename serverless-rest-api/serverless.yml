# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless-rest-api

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

# provider:
#   name: aws
#   runtime: nodejs4.3
#   stage: dev
#   region: us-east-1
# # you can overwrite defaults here
# #  stage: dev
# #  region: us-east-1

# # you can add statements to the Lambda function's IAM Role here
# #  iamRoleStatements:
# #    - Effect: "Allow"
# #      Action:
# #        - "s3:ListBucket"
# #      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
# #    - Effect: "Allow"
# #      Action:
# #        - "s3:PutObject"
# #      Resource:
# #        Fn::Join:
# #          - ""
# #          - - "arn:aws:s3:::"
# #            - "Ref" : "ServerlessDeploymentBucket"

# # you can add packaging information here
# #package:
# #  exclude:
# #    - exclude-me.js
# #  artifact: my-service-code.zip

# iamRoleStatements:
#   - Effect: "Allow"
#     Action:
#       - dynamodb:DescribeTable
#       - dynamodb:Query
#       - dynamodb:Scan
#       - dynamodb:GetItem
#       - dynamodb:PutItem
#       - dynamodb:UpdateItem
#       - dynamodb:DeleteItem
#     Resource: "arn:aws:dynamodb:us-east-1:*:*"

# functions:
#   hello:
#     handler: handler.hello

# #    The following are a few example events you can configure
# #    NOTE: Please make sure to change your handler code to work with those events
# #    Check the event documentation for details
#     events:
# #   test service
#       - http:
#           path: hello/get
#           method: get
# #   create slot
# #  create:
# #    handler: actions/create.create
# #    events:
# #      - http:
# #          path: createslot
# #          method: post
# #          cors: true
# #   get data
#   list:
#     handler: actions/list.list
#     events:
#       - http:
#           path: slotsinfo/get
#           method: get
#           cors: true
# #          path: users/create
# #          method: get
# #      - s3: ${env:BUCKET}
# #      - schedule: rate(10 minutes)
# #      - sns: greeter-topic
# #      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000

# # you can add CloudFormation resource templates here
# resources:
#   Resources:
#     SlotsInfoTable:
#       Type: 'AWS::DynamoDB::Table'
#       DeletionPolicy: Retain
#       Properties:
#         AttributeDefinitions:
#           - AttributeName: id
#             AttributeType: S
#         KeySchema:
#           - AttributeName: id
#             KeyType: HASH
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1
#         TableName: slotsinfotable
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs4.3
  environment:
    DYNAMODB_TABLE: slotsinfotableone
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  # create:
  #   handler: todos/create.create
  #   events:
  #     - http:
  #         path: todos
  #         method: post
  #         cors: true

  # list:
  #   handler: todos/list.list
  #   events:
  #     - http:
  #         path: todos
  #         method: get
  #         cors: true

  # get:
  #   handler: todos/get.get
  #   events:
  #     - http:
  #         path: todos/{id}
  #         method: get
  #         cors: true

  # update:
  #   handler: todos/update.update
  #   events:
  #     - http:
  #         path: todos/{id}
  #         method: put
  #         cors: true

  # delete:
  #   handler: todos/delete.delete
  #   events:
  #     - http:
  #         path: todos/{id}
  #         method: delete
  #         cors: true

  hello:
    handler: handler.hello
    events:
      - http:
          path: hello/get
          method: get

  create:
    handler: actions/create.create
    events:
      - http:
          path: slotsinfo/post
          method: post
          cors: true
  list:
    handler: actions/list.list
    events:
      - http:
          path: slotsinfo/get
          method: get
          cors: true
  
  get:
    handler: actions/getslot.get
    events:
      - http:
          path: slotsinfo/{id}
          method: get
          # integration: lambda
          cors: true
          # request:
          #   template:
          #     application/json: >
          #       {
          #         "latitude" : "$input.params('latitude')",
          #         "longitude": "$input.params('longitude')"
          #       }

# update:
#     handler: actions/update.update
#     events:
#       - http:
#           path: slotsinfo/{id}
#           method: put
#           cors: true
resources:
  Resources: ${file(config/dbtables.yml)}
  
